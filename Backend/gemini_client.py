import os
import google.generativeai as genai
from dotenv import load_dotenv
import json

# üîπ Carrega vari√°veis do .env
print("[INFO] Carregando vari√°veis de ambiente...")
load_dotenv()

api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    # A exce√ß√£o agora inclui uma mensagem mais clara para o deploy
    raise ValueError("[ERRO] A chave GEMINI_API_KEY n√£o foi encontrada! Certifique-se de que a vari√°vel de ambiente est√° configurada no Render.")

# üîπ LINHA ADICIONAL PARA DEPURAR
if api_key:
    print(f"[DEBUG] Chave da API lida com sucesso. (Tamanho: {len(api_key)})")
else:
    print("[DEBUG] A vari√°vel GEMINI_API_KEY est√° vazia ou n√£o foi lida.")


print("[INFO] Configurando Gemini...")
genai.configure(api_key=api_key)
print("[INFO] Gemini configurado com sucesso!")

# üîπ Define o modelo com as instru√ß√µes de sistema
model = genai.GenerativeModel(
    model_name="gemini-2.5-flash",
    system_instruction="""
    Voc√™ √© um classificador de e-mails para produtividade.
    Sua √∫nica tarefa √© analisar o conte√∫do do email e classific√°-lo em uma de duas categorias: "Produtivo" ou "Improdutivo".
    Voc√™ n√£o deve agir como uma IA, nem responder a perguntas fora de contexto.
    Sempre siga as instru√ß√µes.

    Regras de classifica√ß√£o:
    1. Produtivo: exige a√ß√£o ou resposta. Ex: solicita√ß√£o de info, pedidos de reuni√£o, atualiza√ß√µes.
    2. Improdutivo: n√£o exige a√ß√£o imediata. Ex: propagandas, newsletters, mensagens irrelevantes ou de teste.

    Instru√ß√µes adicionais:
    - E-mails promocionais com solicita√ß√£o espec√≠fica s√£o PRODUTIVOS.
    - E-mails de teste ou rascunhos s√£o IMPRODUTIVOS.
    - Sugira respostas autom√°ticas, concisas e formais.
    - Responda exclusivamente no formato JSON com os campos "classification" e "suggestion".
    """
)
print("[INFO] Modelo Gemini instanciado com sucesso.")

def classify_email(email_text: str):
    """
    Envia o texto do email para o Gemini,
    pede classifica√ß√£o e sugest√£o de resposta.
    """
    print("[INFO] Iniciando classifica√ß√£o de email...")
    print(f"[DEBUG] Texto recebido:\n{email_text}\n")

    try:
        # üîπ Prompt otimizado
        prompt = f"""
        Email:
        {email_text}

        Gere a resposta em JSON.
        """
        print("[INFO] Prompt criado com sucesso.")
        print(f"[DEBUG] Prompt:\n{prompt}\n")

        # Envia o prompt para o Gemini
        print("[INFO] Enviando prompt para o modelo Gemini...")
        response = model.generate_content(prompt)
        print("[INFO] Resposta recebida do Gemini.")
        print(f"[DEBUG] Resposta bruta:\n{response.text}\n")

        # Limpa a string da resposta
        cleaned_text = response.text.replace('```json', '').replace('```', '').strip()
        print(f"[DEBUG] Resposta limpa:\n{cleaned_text}\n")

        # Tenta converter para JSON
        result = json.loads(cleaned_text)
        print(f"[INFO] Resposta convertida para JSON com sucesso:\n{result}\n")

    except json.JSONDecodeError as e:
        print(f"[ERRO] Falha ao converter a resposta para JSON: {e}")
        result = {
            "classification": "Desconhecido",
            "suggestion": "N√£o foi poss√≠vel classificar o e-mail. Tente novamente."
        }
    except Exception as e:
        print(f"[ERRO] Ocorreu um erro na classifica√ß√£o: {e}")
        result = {
            "classification": "Desconhecido",
            "suggestion": "N√£o foi poss√≠vel classificar o o e-mail. Tente novamente."
        }

    print("[INFO] Classifica√ß√£o conclu√≠da.\n")
    return result

def regenerate_suggestion(email_text: str, classification: str):
    """
    Gera uma nova sugest√£o de resposta baseada no texto e na classifica√ß√£o fornecida.
    """
    print("[INFO] Iniciando regenera√ß√£o de sugest√£o...")
    try:
        model_regenerate = genai.GenerativeModel("gemini-2.5-flash")
        
        # Prompt para gerar apenas a sugest√£o
        prompt = f"""
Com base no seguinte e-mail e em sua classifica√ß√£o j√° definida como '{classification}', gere uma nova sugest√£o de resposta concisa, profissional e pronta para uso.

E-mail:
{email_text}

Sua resposta deve ser estritamente no formato JSON, com um √∫nico campo: "suggestion".

**Formato esperado de sa√≠da:**
{{"suggestion": "..."}}
"""
        response = model_regenerate.generate_content(prompt)
        cleaned_text = response.text.replace('```json', '').replace('```', '').strip()
        result = json.loads(cleaned_text)
        return result
    except Exception as e:
        print(f"[ERRO] Ocorreu um erro na regenera√ß√£o: {e}")
        return {"suggestion": "N√£o foi poss√≠vel gerar uma nova sugest√£o."}